module sdnmud {
    yang-version 1.1;
    namespace "urn:opendaylight:params:xml:ns:yang:sdnmud";
    prefix "sdnmud";

  import ietf-inet-types {
    prefix inet;
  }
  
  organization
    "NIST Advanced Networking Technologies Division.";

  contact
    "Web: http://www.nist.gov
    email: mranga@nist.gov
    ";
  description
    "Application system configuration parameters. ";

  revision 2017-09-15 {
    description
      "Implementation YANG model for system configuration. This provides various parameter 
       settings for the application.";
  }

  container sdnmud-config {

      leaf keystore-home {
            type string;
            mandatory true;
            description
                "Java keystore home for manufacturer certificates.";
      }

      leaf key-pass {
            type string;
            mandatory true;
            description
                "Key store password.";
      }

      leaf table-start {
            type uint32;
            default "0";
            description
                "Start of tables in rules table space. Not yet implemented";
      }

      leaf mfg-id-rule-cache-timeout {
            type uint32;
            default "120";
            description
                "Time (in seconds) for timeout of flow rule that classifies packets by manufacturer.";
      }

      leaf trust-self-signed-cert {
           type boolean;
           default "false";
           description
                "Whether or not to trust MUD profiles that are self signed. This is for DEBUGGING ONLY 
                self signed Certs should not be trusted under normal circumstances";

      }

      leaf relaxed-acl {
           type boolean;
           default "false";
           description
              "Fowrard packet before installing classification rules - this reduces the packet drop and allows
               for continued operation when controller is not connected. Warn operator if ACL violated.";
      }



  }


  rpc clear-packet-count {
    output {
        leaf success {
            description 
                "Clear the packet count. This is for testing purposes. Return OK if the call succeeded. 
                 This is for test and measurement purposes.
                ";
            type boolean;
        }
    }
  }

  rpc clear-cache {
    output {
        leaf success {
            description 
                "Clear the mfg model flow rules in tables 3 and 4. This is for test and measurement purposes. 
                 Return OK if the call succeeded. ";
            type boolean;
        }
    }
  }

  rpc get-packet-count {
    output {
        leaf packet-count {
            description 
                "returns the number of packets seen at the controller. 
                This is for performance benchmarking.";
            type uint32;
        }

        leaf mud-packet-count {
            description 
                "returns the number of packets seen at the controller resulting from packets directed to the 
                 controller from flow rules in tables 3,4,5. This is for performance benchmarking.";
            type uint32;
        }
    }
  }

}
